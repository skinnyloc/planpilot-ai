name: Comprehensive Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '18'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  VITE_R2_ACCOUNT_ID: ${{ secrets.VITE_R2_ACCOUNT_ID }}
  VITE_R2_ACCESS_KEY_ID: ${{ secrets.VITE_R2_ACCESS_KEY_ID }}
  VITE_R2_SECRET_ACCESS_KEY: ${{ secrets.VITE_R2_SECRET_ACCESS_KEY }}
  VITE_R2_BUCKET_NAME: ${{ secrets.VITE_R2_BUCKET_NAME }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  integration-tests:
    name: Integration & E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        test-suite:
          - name: "Critical Integrations"
            filter: "integration"
            critical: true
          - name: "End-to-End Workflows"
            filter: "e2e"
            critical: true
          - name: "Performance Tests"
            filter: "performance"
            critical: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-test-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-test-

      - name: Validate environment variables
        run: |
          echo "Checking required environment variables..."
          [ -n "$NEXT_PUBLIC_SUPABASE_URL" ] || { echo "Missing NEXT_PUBLIC_SUPABASE_URL"; exit 1; }
          [ -n "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ] || { echo "Missing NEXT_PUBLIC_SUPABASE_ANON_KEY"; exit 1; }
          [ -n "$VITE_R2_ACCOUNT_ID" ] || { echo "Missing VITE_R2_ACCOUNT_ID"; exit 1; }
          echo "Environment validation passed ‚úÖ"

      - name: Run lint checks
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run ${{ matrix.test-suite.name }}
        id: test-execution
        run: |
          echo "Running test suite: ${{ matrix.test-suite.name }}"
          if [ "${{ matrix.test-suite.critical }}" = "true" ]; then
            echo "Running critical test suite - failures will fail the build"
            npm run test -- --filter "${{ matrix.test-suite.filter }}" --verbose
          else
            echo "Running non-critical test suite - failures will be reported but won't fail the build"
            npm run test -- --filter "${{ matrix.test-suite.filter }}" --verbose || echo "Non-critical tests failed"
          fi

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.test-suite.filter }}
          path: test-reports/
          retention-days: 30

      - name: Upload test results to GitHub
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: ${{ matrix.test-suite.name }} Results
          path: test-reports/junit-report.xml
          reporter: java-junit
          fail-on-error: ${{ matrix.test-suite.critical }}

      - name: Comment test results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const report = fs.readFileSync('test-reports/console-report.txt', 'utf8');
              const results = fs.readFileSync('test-reports/test-results.json', 'utf8');
              const testData = JSON.parse(results);

              const comment = `## ${{ matrix.test-suite.name }} Results

              **Status:** ${testData.summary.failedSuites === 0 ? '‚úÖ PASSED' : '‚ùå FAILED'}
              **Duration:** ${Math.round(testData.summary.duration / 1000)}s
              **Test Suites:** ${testData.summary.passedSuites}/${testData.summary.totalSuites} passed
              **Individual Tests:** ${testData.summary.passedTests}/${testData.summary.totalTests} passed

              <details>
              <summary>Detailed Report</summary>

              \`\`\`
              ${report}
              \`\`\`
              </details>`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post test results comment:', error.message);
            }

  security-checks:
    name: Security & Dependency Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Run dependency vulnerability scan
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: security-results.sarif
          results_format: sarif
          publish_results: true

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run pre-deployment checks
        run: npm run test:pre-deploy

      - name: Generate deployment report
        run: |
          echo "# Deployment Readiness Report" > deployment-report.md
          echo "Generated: $(date)" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Test Results" >> deployment-report.md
          if [ -f "test-reports/test-results.json" ]; then
            node -e "
              const results = JSON.parse(require('fs').readFileSync('test-reports/test-results.json', 'utf8'));
              console.log('- Total Suites:', results.summary.totalSuites);
              console.log('- Passed Suites:', results.summary.passedSuites);
              console.log('- Failed Suites:', results.summary.failedSuites);
              console.log('- Total Duration:', Math.round(results.summary.duration / 1000) + 's');
              if (results.summary.failedSuites === 0) {
                console.log('\\n‚úÖ **System is ready for deployment**');
              } else {
                console.log('\\n‚ùå **System is NOT ready for deployment**');
              }
            " >> deployment-report.md
          fi

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-readiness-report
          path: deployment-report.md

  notify-on-failure:
    name: Notify on Critical Failure
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Send notification on critical test failure
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Critical Integration Tests Failed - ${new Date().toISOString()}`,
              body: `Critical integration tests have failed on the main branch.

              **Commit:** ${context.sha}
              **Workflow:** ${context.workflow}
              **Run:** ${context.runNumber}

              Please investigate and fix the failing tests before any deployments.

              [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              labels: ['bug', 'critical', 'tests-failing']
            });