import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { auth } from '@clerk/nextjs/server';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL || "placeholder",
  process.env.SUPABASE_SERVICE_ROLE_KEY || "placeholder"
);

export async function GET(request, { params }) {
  try {
    // Authenticate user
    const { userId } = auth();
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { id } = params;

    // Get document from database
    const { data: document, error } = await supabase
      .from('documents')
      .select('*')
      .eq('id', id)
      .eq('user_id', userId)
      .single();

    if (error || !document) {
      return NextResponse.json(
        { error: 'Document not found' },
        { status: 404 }
      );
    }

    // For demo purposes, generate content based on document type
    let content = '';
    let mimeType = 'text/plain';
    let filename = `${document.title}.txt`;

    if (document.document_type === 'proposal') {
      content = `# ${document.title}

## Generated Proposal

This is a generated proposal document.

**Type:** ${document.document_type}
**Created:** ${new Date(document.created_at).toLocaleDateString()}
**Description:** ${document.description || 'No description available'}

## Content

This proposal was generated based on your business plan and includes comprehensive details for your funding request.

---

Generated by PlanPilot AI
Document ID: ${document.id}
`;
      mimeType = 'text/markdown';
      filename = `${document.title}.md`;
    } else {
      content = `${document.title}

Type: ${document.document_type}
Created: ${new Date(document.created_at).toLocaleDateString()}
Description: ${document.description || 'No description available'}

This is your document content. In a production environment, this would contain the actual document content from storage.

Document ID: ${document.id}
User ID: ${document.user_id}
`;
    }

    return new Response(content, {
      headers: {
        'Content-Type': mimeType,
        'Content-Disposition': `attachment; filename="${filename}"`,
      },
    });

  } catch (error) {
    console.error('Document download error:', error);
    return NextResponse.json(
      { error: 'Failed to download document' },
      { status: 500 }
    );
  }
}